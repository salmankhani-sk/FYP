// This directive tells Next.js to render this component on the client side.
// It's important because it enables the use of client-side features like React hooks (useState, useEffect) and Framer Motion animations.
// Use case: Allows the UploadPage to handle file uploads, API requests, and animations dynamically on the client.
"use client";

// Import useState and useEffect from React for managing state and side effects.
// It's important for handling dynamic UI updates like file selection, loading states, and API fetching.
// Use case: Manages states like selected file, recipe, videos, and history, and fetches data when the component mounts.
import { useState, useEffect, JSX } from "react";

// Import axios for making HTTP requests to the backend API.
// It's important for sending file uploads and fetching data like recipes, videos, and history.
// Use case: Uploads images to the backend, fetches recipes, related videos, and user history.
import axios from "axios";

// Import Cookies from js-cookie to manage browser cookies.
// It's important for accessing the authentication token stored in cookies.
// Use case: Retrieves the token to include in API requests for authentication.
import Cookies from "js-cookie";

// Import useRouter from Next.js for programmatic navigation.
// It's important for redirecting users, such as when they are not authenticated.
// Use case: Redirects to the login page if the user’s token is invalid or missing.
import { useRouter } from "next/navigation";

// Import motion and AnimatePresence from Framer Motion for animations.
// It's important for creating smooth, engaging transitions and effects in the UI.
// Use case: Animates the container, sections, buttons, and history items for a polished user experience.
import { motion, AnimatePresence } from "framer-motion";

// Define an interface for history entries to ensure TypeScript type safety.
// It's important for specifying the expected structure of history items.
// Use case: Ensures that history entries have a message and timestamp for display.
interface HistoryEntry {
    message: string;
    timestamp: string;
}

// Define an interface for video objects to ensure TypeScript type safety.
// It's important for specifying the expected structure of video data from the API.
// Use case: Ensures that videos have a videoId, title, and thumbnail for rendering YouTube embeds.
interface Video {
    videoId: string;
    title: string;
    thumbnail: string;
}

// Define the UploadPage functional component as the default export for Next.js App Router.
// It's important because it serves as the page for uploading images and generating recipes.
// Use case: Renders the uploads page at the "/uploads" route, allowing users to upload dish images and view recipes.
export default function UploadPage(): JSX.Element {
    // Use useState to manage the selected file for upload, initially set to null.
    // It's important for storing the file selected by the user via the file input.
    // Use case: Holds the image file that will be uploaded to the backend for recipe generation.
    const [selectedFile, setSelectedFile] = useState<File | null>(null);

    // Use useState to manage the fetched recipe, initially set to null.
    // It's important for displaying the recipe generated by the backend after uploading an image.
    // Use case: Shows the recipe for the dish identified from the uploaded image.
    const [recipe, setRecipe] = useState<string | null>(null);

    // Use useState to manage the fetched dish name, initially set to null.
    // It's important for displaying the name of the dish identified from the uploaded image.
    // Use case: Shows the dish name (e.g., "Pizza") alongside the recipe for clarity.
    const [dish, setDish] = useState<string | null>(null);

    // Use useState to manage related YouTube videos, initially an empty array.
    // It's important for displaying videos related to the identified dish.
    // Use case: Shows a list of YouTube videos for the dish to help users learn how to cook it.
    const [videos, setVideos] = useState<Video[]>([]);

    // Use useState to manage the loading state for recipe fetching, initially false.
    // It's important for showing a loading indicator while the recipe is being fetched.
    // Use case: Displays "Processing..." on the upload button while the backend processes the image.
    const [loading, setLoading] = useState<boolean>(false);

    // Use useState to manage the loading state for video fetching, initially false.
    // It's important for showing a loading indicator while videos are being fetched.
    // Use case: Displays a "Fetching related videos..." message while videos are being loaded.
    const [loadingVideos, setLoadingVideos] = useState<boolean>(false);

    // Use useState to manage error messages, initially set to null.
    // It's important for displaying errors to the user when something goes wrong.
    // Use case: Shows an error message if the file upload fails or the API request encounters an issue.
    const [error, setError] = useState<string | null>(null);

    // Use useState to manage the user’s upload history, initially an empty array.
    // It's important for displaying the user’s past uploads and recipe generations.
    // Use case: Shows a list of previous uploads with timestamps, allowing users to re-generate recipes.
    const [history, setHistory] = useState<HistoryEntry[]>([]);

    // Use useState to manage errors related to fetching history, initially set to null.
    // It's important for displaying errors if the history fetch fails.
    // Use case: Shows an error message if the user is not logged in or the history API request fails.
    const [historyError, setHistoryError] = useState<string | null>(null);

    // Use useState to manage the loading state for history fetching, initially false.
    // It's important for showing a loading indicator while history is being fetched.
    // Use case: Displays a "Loading history..." message while the history is being fetched.
    const [loadingHistory, setLoadingHistory] = useState<boolean>(false);

    // Use useRouter to programmatically navigate to other pages.
    // It's important for redirecting users to the login page if they are not authenticated.
    // Use case: Redirects to "/login" if the token is invalid or missing during API requests.
    const router = useRouter();

    // Use useEffect to fetch the user’s history when the component mounts.
    // It's important for loading the user’s upload history as soon as the page loads.
    // Use case: Displays the user’s past uploads and recipe generations on page load.
    useEffect(() => {
        // Call the fetchHistory function to load the history.
        // It's important for initiating the history fetch on component mount.
        // Use case: Ensures the history section is populated when the user visits the uploads page.
        fetchHistory();
        // Note: fetchHistory is not included in the dependency array because it’s a stable function defined within the component and doesn’t change.
    }, []); // Empty dependency array to run only on mount.

    // Define a function to fetch the user’s upload history from the backend.
    // It's important for retrieving the user’s past uploads and recipe generations.
    // Use case: Populates the history section with the user’s previous interactions.
    const fetchHistory = async (): Promise<void> => {
        // Set the loadingHistory state to true while fetching history.
        // It's important for showing a loading indicator during the API request.
        // Use case: Informs the user that the history is being loaded.
        setLoadingHistory(true);

        try {
            // Retrieve the authentication token from cookies using Cookies.get.
            // It's important for including the token in the API request for authentication.
            // Use case: Ensures the backend can verify the user’s identity for fetching history.
            const token = Cookies.get("token");

            // Check if a token exists; if not, set an error and return.
            // It's important for ensuring the user is authenticated before making the request.
            // Use case: Prevents unauthorized requests and informs the user to log in.
            if (!token) {
                setHistoryError("Please log in to view history.");
                return;
            }

            // Make a GET request to the backend to fetch the user’s upload history.
            // It's important for retrieving the history data from the server.
            // Use case: Fetches the list of past uploads and recipe generations for the authenticated user.
            const response = await axios.get<{ history: HistoryEntry[] }>("http://127.0.0.1:8000/uploads-history/", {
                // Include the token in the Authorization header for authentication.
                // It's important for verifying the user’s identity with the backend.
                // Use case: Ensures the backend allows the request by validating the token.
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            });

            // Update the history state with the fetched data.
            // It's important for displaying the history in the UI.
            // Use case: Populates the history section with the user’s past uploads.
            setHistory(response.data.history);

            // Clear any previous history errors.
            // It's important for ensuring the UI reflects the successful fetch.
            // Use case: Removes any error message if the fetch succeeds after a previous failure.
            setHistoryError(null);
        } catch (err) {
            // Check if the error is an Axios error with a 403 or 401 status (unauthorized).
            // It's important for handling authentication failures gracefully.
            // Use case: Redirects the user to the login page if their token is invalid or expired.
            if (axios.isAxiosError(err) && (err.response?.status === 403 || err.response?.status === 401)) {
                // Remove the token from cookies since it’s invalid.
                // It's important for clearing the invalid authentication state.
                // Use case: Ensures the user is logged out if their token is no longer valid.
                Cookies.remove("token");

                // Redirect to the login page using router.push.
                // It's important for prompting the user to log in again.
                // Use case: Sends the user to "/login" to re-authenticate.
                router.push("/login");
            } else {
                // Set a generic error message if the fetch fails for another reason.
                // It's important for informing the user of the failure.
                // Use case: Displays an error message if the backend is down or the request fails.
                setHistoryError("Error fetching history. Please try again.");
            }
        } finally {
            // Set the loadingHistory state to false after the request completes.
            // It's important for hiding the loading indicator once the fetch is done.
            // Use case: Stops showing the loading message after history is fetched or fails.
            setLoadingHistory(false);
        }
    };

    // Define a function to handle file selection from the input element.
    // It's important for capturing the user’s selected file for upload.
    // Use case: Updates the selectedFile state when the user chooses an image to upload.
    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
        // Check if a file was selected and update the state if so.
        // It's important for ensuring a file is available before proceeding with the upload.
        // Use case: Stores the selected image file in state for later upload.
        if (event.target.files && event.target.files.length > 0) {
            setSelectedFile(event.target.files[0]);

            // Clear any previous error messages.
            // It's important for resetting the error state after a new file is selected.
            // Use case: Removes any error message from a previous failed upload attempt.
            setError(null);
        }
    };

    // Define a function to upload the selected file and fetch a recipe from the backend.
    // It's important for sending the image to the backend and retrieving a recipe for the identified dish.
    // Use case: Uploads the user’s image, identifies the dish, and generates a recipe for display.
    const uploadFile = async (): Promise<void> => {
        // Check if a file is selected; if not, set an error and return.
        // It's important for validating that a file is present before making the request.
        // Use case: Prevents the upload from proceeding if the user hasn’t selected an image.
        if (!selectedFile) {
            setError("Please select a file to upload.");
            return;
        }

        // Set the loading state to true while the upload and recipe fetch are in progress.
        // It's important for showing a loading indicator to the user.
        // Use case: Displays "Processing..." on the button while the backend processes the image.
        setLoading(true);

        // Clear any previous error messages, recipe, videos, and dish name.
        // It's important for resetting the UI to a clean state before the new request.
        // Use case: Ensures the UI only shows the new recipe and videos after a successful upload.
        setError(null);
        setRecipe(null);
        setVideos([]);
        setDish(null);

        // Create a FormData object to send the file to the backend.
        // It's important for packaging the file in a format suitable for multipart/form-data requests.
        // Use case: Prepares the image file for upload to the backend API.
        const formData = new FormData();

        // Append the selected file to the FormData object with the key "file".
        // It's important for including the file in the request payload.
        // Use case: Sends the image file to the backend for processing.
        formData.append("file", selectedFile);

        // Retrieve the authentication token from cookies.
        // It's important for including the token in the API request for authentication.
        // Use case: Ensures the backend can verify the user’s identity for the upload request.
        const token = Cookies.get("token");

        try {
            // Make a POST request to the backend to upload the image and fetch a recipe.
            // It's important for sending the image and receiving the dish name and recipe in response.
            // Use case: Uploads the image, identifies the dish, and generates a recipe for the user.
            const response = await axios.post<{ dish: string; recipe: string }>("http://127.0.0.1:8000/upload-image/", formData, {
                // Include headers for multipart/form-data and authorization.
                // It's important for specifying the content type and authenticating the request.
                // Use case: Ensures the backend accepts the file upload and verifies the user’s token.
                headers: {
                    "Content-Type": "multipart/form-data",
                    "Authorization": `Bearer ${token}`,
                },
            });

            // Update the dish state with the identified dish name from the response.
            // It's important for displaying the dish name in the UI.
            // Use case: Shows the user the name of the dish identified from their image (e.g., "Pizza").
            setDish(response.data.dish);

            // Update the recipe state with the generated recipe from the response.
            // It's important for displaying the recipe in the UI.
            // Use case: Shows the user the recipe for the identified dish.
            setRecipe(response.data.recipe);

            // Fetch related YouTube videos for the identified dish.
            // It's important for providing additional resources to the user.
            // Use case: Loads videos related to the dish to help the user learn how to cook it.
            fetchVideos(response.data.dish);

            // Refresh the user’s history after a successful upload.
            // It's important for keeping the history section up-to-date with the latest upload.
            // Use case: Adds the new upload to the history list immediately after processing.
            await fetchHistory();
        } catch (err) {
            // Check if the error is an Axios error with a 403 or 401 status (unauthorized).
            // It's important for handling authentication failures gracefully.
            // Use case: Redirects the user to the login page if their token is invalid or expired.
            if (axios.isAxiosError(err) && (err.response?.status === 403 || err.response?.status === 401)) {
                // Remove the token from cookies since it’s invalid.
                // It's important for clearing the invalid authentication state.
                // Use case: Ensures the user is logged out if their token is no longer valid.
                Cookies.remove("token");

                // Redirect to the login page using router.push.
                // It's important for prompting the user to log in again.
                // Use case: Sends the user to "/login" to re-authenticate.
                router.push("/login");
            } else {
                // Set a generic error message if the upload fails for another reason.
                // It's important for informing the user of the failure.
                // Use case: Displays an error message if the backend fails to process the image.
                setError("Error fetching the recipe. Please try again.");
            }
        } finally {
            // Set the loading state to false after the request completes.
            // It's important for hiding the loading indicator once the upload is done.
            // Use case: Stops showing "Processing..." on the button after the request finishes.
            setLoading(false);
        }
    };

    // Define a function to fetch related YouTube videos for a given dish.
    // It's important for retrieving videos related to the dish to enhance the user experience.
    // Use case: Provides instructional videos for the user to learn how to cook the identified dish.
    const fetchVideos = async (dish: string): Promise<void> => {
        // Set the loadingVideos state to true while fetching videos.
        // It's important for showing a loading indicator during the API request.
        // Use case: Displays "Fetching related videos..." while the videos are being loaded.
        setLoadingVideos(true);

        try {
            // Make a GET request to the backend to fetch videos related to the dish.
            // It's important for retrieving video data from the server.
            // Use case: Fetches YouTube videos related to the dish (e.g., "Pizza recipes").
            const response = await axios.get<{ videos: Video[] }>(`http://127.0.0.1:8000/get-videos/${dish}`);

            // Update the videos state with the fetched video data.
            // It's important for displaying the videos in the UI.
            // Use case: Shows a list of YouTube videos related to the dish.
            setVideos(response.data.videos);

            // Clear any previous error messages related to video fetching.
            // It's important for ensuring the UI reflects the successful fetch.
            // Use case: Removes any error message if the fetch succeeds after a previous failure.
            setError(null);
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        } catch (err) {
            // Set an error message if the video fetch fails.
            // It's important for informing the user of the failure.
            // Use case: Displays an error message if the backend fails to fetch videos.
            setError("Error fetching related videos. Please try again.");
        } finally {
            // Set the loadingVideos state to false after the request completes.
            // It's important for hiding the loading indicator once the fetch is done.
            // Use case: Stops showing the "Fetching related videos..." message after the request finishes.
            setLoadingVideos(false);
        }
    };

    // Define a function to handle clicking on a history item.
    // It's important for allowing the user to re-generate a recipe from their history.
    // Use case: Re-fetches the recipe and videos for a dish previously uploaded by the user.
    const handleHistoryClick = async (entry: HistoryEntry): Promise<void> => {
        // Initialize a variable to store the dish name extracted from the history entry.
        // It's important for identifying the dish to re-generate the recipe for.
        // Use case: Extracts the dish name (e.g., "Pizza") from a history entry message.
        let dish = "";

        // Check if the history entry message indicates a generated recipe.
        // It's important for ensuring the message contains a dish name to re-generate.
        // Use case: Confirms that the history entry is for a recipe generation action.
        if (entry.message.includes("Generated recipe for")) {
            // Use a regular expression to extract the dish name from the message.
            // It's important for parsing the dish name from the history entry.
            // Use case: Extracts the dish name from a message like "Generated recipe for Pizza:".
            const match = entry.message.match(/Generated recipe for (.+?):/);

            // If a match is found, set the dish name to the extracted value.
            // It's important for obtaining the dish name to use in the API request.
            // Use case: Sets the dish variable to "Pizza" if the message matches the pattern.
            if (match) {
                dish = match[1];
            }
        }

        // Check if a dish name was extracted; if so, proceed with re-fetching the recipe.
        // It's important for ensuring there’s a valid dish name before making the request.
        // Use case: Prevents unnecessary API requests if the dish name couldn’t be extracted.
        if (dish) {
            // Set the loading state to true while re-fetching the recipe.
            // It's important for showing a loading indicator during the API request.
            // Use case: Displays "Processing..." on the UI while the recipe is being re-fetched.
            setLoading(true);

            // Clear any previous error messages, recipe, videos, and dish name.
            // It's important for resetting the UI to a clean state before the new request.
            // Use case: Ensures the UI only shows the re-fetched recipe and videos.
            setError(null);
            setRecipe(null);
            setVideos([]);
            setDish(null);

            try {
                // Retrieve the authentication token from cookies.
                // It's important for including the token in the API request for authentication.
                // Use case: Ensures the backend can verify the user’s identity for the recipe request.
                const token = Cookies.get("token");

                // Make a POST request to the backend to re-generate the recipe for the dish.
                // It's important for fetching the recipe based on the dish name.
                // Use case: Re-generates the recipe for a dish from the user’s history (e.g., "Pizza").
                const response = await axios.post<{ recipe: string }>(
                    "http://127.0.0.1:8000/generate-recipe/",
                    // Send the dish name as a prompt in the request body.
                    // It's important for specifying which dish to generate a recipe for.
                    // Use case: Tells the backend to generate a recipe for the specified dish.
                    { prompt: dish },
                    // Include headers for content type and authorization.
                    // It's important for specifying the request format and authenticating the user.
                    // Use case: Ensures the backend accepts the request and verifies the token.
                    {
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": `Bearer ${token}`,
                        },
                    }
                );

                // Update the dish state with the dish name.
                // It's important for displaying the dish name in the UI.
                // Use case: Shows the user the name of the dish for the re-fetched recipe.
                setDish(dish);

                // Update the recipe state with the re-fetched recipe.
                // It's important for displaying the recipe in the UI.
                // Use case: Shows the user the re-generated recipe for the dish.
                setRecipe(response.data.recipe);

                // Fetch related YouTube videos for the dish.
                // It's important for providing additional resources to the user.
                // Use case: Loads videos related to the dish to help the user learn how to cook it.
                fetchVideos(dish);
            } catch (err) {
                // Check if the error is an Axios error with a 403 or 401 status (unauthorized).
                // It's important for handling authentication failures gracefully.
                // Use case: Redirects the user to the login page if their token is invalid or expired.
                if (axios.isAxiosError(err) && (err.response?.status === 403 || err.response?.status === 401)) {
                    // Remove the token from cookies since it’s invalid.
                    // It's important for clearing the invalid authentication state.
                    // Use case: Ensures the user is logged out if their token is no longer valid.
                    Cookies.remove("token");

                    // Redirect to the login page using router.push.
                    // It's important for prompting the user to log in again.
                    // Use case: Sends the user to "/login" to re-authenticate.
                    router.push("/login");
                } else {
                    // Set a generic error message if the re-fetch fails for another reason.
                    // It's important for informing the user of the failure.
                    // Use case: Displays an error message if the backend fails to re-generate the recipe.
                    setError("Error re-fetching the recipe. Please try again.");
                }
            } finally {
                // Set the loading state to false after the request completes.
                // It's important for hiding the loading indicator once the fetch is done.
                // Use case: Stops showing "Processing..." on the UI after the request finishes.
                setLoading(false);
            }
        }
    };

    // Define animation variants for the main container using Framer Motion.
    // It's important for creating a smooth entrance animation for the entire upload section.
    // Use case: Animates the upload form into view when the page loads.
    const containerVariants = {
        // Hidden state: invisible and positioned 50px below its final position.
        // It's important for setting the starting point of the animation.
        // Use case: Prepares the container to slide up into view.
        hidden: { opacity: 0, y: 50 },
        // Visible state: fully visible and at its normal position.
        // It's important for defining the end point of the animation.
        // Use case: Brings the container into view with a smooth transition.
        visible: { opacity: 1, y: 0, transition: { duration: 0.6, ease: "easeOut" } },
    };

    // Define animation variants for sections like recipe and videos.
    // It's important for creating a smooth entrance animation for these sections.
    // Use case: Animates the recipe and videos sections into view when they appear.
    const sectionVariants = {
        // Hidden state: invisible and positioned 50px to the left.
        // It's important for setting the starting point of the animation.
        // Use case: Prepares the section to slide in from the left.
        hidden: { opacity: 0, x: -50 },
        // Visible state: fully visible and at its normal position.
        // It's important for defining the end point of the animation.
        // Use case: Brings the section into view with a smooth transition.
        visible: { opacity: 1, x: 0, transition: { duration: 0.5, ease: "easeOut" } },
    };

    // Define animation variants for history items.
    // It's important for creating a smooth entrance animation for each history item.
    // Use case: Animates each history item into view with a staggered effect.
    const historyItemVariants = {
        // Hidden state: invisible with zero height.
        // It's important for setting the starting point of the animation.
        // Use case: Prepares the history item to expand into view.
        hidden: { opacity: 0, height: 0 },
        // Visible state: fully visible with automatic height.
        // It's important for defining the end point of the animation.
        // Use case: Expands the history item into view with a smooth transition.
        visible: { opacity: 1, height: "auto", transition: { duration: 0.3, ease: "easeOut" } },
    };

    // Define animation variants for buttons.
    // It's important for adding interactive animations to the upload button.
    // Use case: Scales the button slightly on hover and tap for better user feedback.
    const buttonVariants = {
        // Hover state: scale up to 105% of the original size.
        // It's important for providing visual feedback when the user hovers over the button.
        // Use case: Makes the button more interactive by scaling up on hover.
        hover: { scale: 1.05, transition: { duration: 0.3 } },
        // Tap state: scale down to 95% of the original size.
        // It's important for providing visual feedback when the user clicks the button.
        // Use case: Makes the button appear pressed when clicked.
        tap: { scale: 0.95, transition: { duration: 0.2 } },
    };

    // Return the JSX structure that defines the uploads page layout and content.
    // It's important for rendering the UI that users interact with.
    // Use case: Displays the file upload form, history, recipe, and related videos.
    return (
        // Main wrapper div with a gradient background, full-screen height, and centered content.
        // It's important for setting the overall page style and layout.
        // Use case: Provides a clean, centered layout with a blue-to-indigo gradient background.
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex flex-col items-center justify-center p-6">
            {/* Animated container for the upload form with a white background, padding, rounded corners, and shadow.
               It's important for creating a clean, card-like section for the upload UI.
               Use case: Groups the upload form elements in a visually appealing container. */}
            <motion.div
                // Styles for the container: white background, padding, rounded corners, shadow, and max width.
                // It's important for responsive design and visual appeal.
                // Use case: Ensures the form looks good on all screen sizes with a clean, modern design.
                className="bg-white p-10 rounded-2xl shadow-2xl max-w-md w-full space-y-6"
                // Apply containerVariants for entrance animation.
                // It's important for animating the container into view.
                // Use case: Slides the container up into view when the page loads.
                variants={containerVariants}
                // Initial state: hidden (as defined in containerVariants).
                // It's important for starting the animation from the hidden state.
                // Use case: Prepares the container for the entrance animation.
                initial="hidden"
                // Animate state: visible (as defined in containerVariants).
                // It's important for triggering the animation to the visible state.
                // Use case: Executes the entrance animation when the component mounts.
                animate="visible"
            >
                {/* Heading for the upload section with large text, bold font, and centered alignment.
                   It's important for clearly indicating the purpose of the page.
                   Use case: Informs the user that this page is for uploading a dish image. */}
                <h1 className="text-4xl font-bold text-center text-indigo-800 tracking-tight"> {/*
                    // Text content of the heading with an emoji.
                    // It's important for providing a friendly, engaging title.
                    // Use case: Encourages the user to upload an image with a clear call-to-action. */}    
                    Upload a Dish Image 📸
                </h1>

                {/* File Input Section: Animated container for the file input and label.
                   It's important for providing a form element to select an image file.
                   Use case: Allows the user to choose an image file to upload for recipe generation. */}
                <motion.div
                    // Styles for the file input section: margin-bottom for spacing.
                    // It's important for layout spacing between elements.
                    // Use case: Ensures the file input section is properly spaced from other elements.
                    className="mb-6"
                    // Initial state: invisible and positioned 20px below.
                    // It's important for setting up the animation starting point.
                    // Use case: Prepares the file input to slide up into view.
                    initial={{ opacity: 0, y: 20 }}
                    // Animate state: fully visible and at its normal position.
                    // It's important for completing the animation effect.
                    // Use case: Brings the file input into view with a smooth transition.
                    animate={{ opacity: 1, y: 0 }}
                    // Animation settings: 0.5-second duration.
                    // It's important for controlling the speed of the animation.
                    // Use case: Ensures the animation is smooth and not too fast.
                    transition={{ duration: 0.5 }}
                >
                    {/* Label for the file input with medium text and gray color.
                       It's important for providing a clear label for accessibility.
                       Use case: Informs the user what the input is for and improves screen reader support. */}
                    <label htmlFor="file" className="block text-lg font-medium text-gray-700 mb-2">  {/*
                        // Text content of the label.
                        // It's important for clearly indicating the input’s purpose.
                        // Use case: Tells the user to select an image file.  */}
                        Select an image
                    </label>
                    {/* Animated file input element for selecting an image.
                       It's important for allowing the user to choose a file from their device.
                       Use case: Captures the user’s selected image file for upload. */}
                    <motion.input
                        // ID for the input, matching the label’s htmlFor attribute.
                        // It's important for associating the label with the input for accessibility.
                        // Use case: Ensures clicking the label focuses the input for better UX.
                        id="file"
                        // Name attribute for the input, used in form submissions.
                        // It's important for identifying the input in form data (though not used here since FormData is manual).
                        // Use case: Provides a name for the input in case it’s part of a larger form.
                        name="file"
                        // Input type set to "file" for file selection.
                        // It's important for specifying that this input is for file uploads.
                        // Use case: Allows the user to select an image file from their device.
                        type="file"
                        // Event handler for file selection changes.
                        // It's important for capturing the selected file and updating the state.
                        // Use case: Updates the selectedFile state when the user chooses a file.
                        onChange={handleFileChange}
                        // Styles for the file input: custom button appearance with Tailwind classes.
                        // It's important for improving the visual design of the file input.
                        // Use case: Makes the file input look modern and consistent with the app’s design.
                        className="block w-full text-sm text-gray-500 file:mr-4 file:py-3 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 transition-all duration-300"
                        // Restrict file types to images only.
                        // It's important for ensuring only valid image files are selected.
                        // Use case: Prevents the user from uploading non-image files like PDFs.
                        accept="image/*"
                        // Animation on focus: scale up to 102% of the original size.
                        // It's important for providing visual feedback when the input is focused.
                        // Use case: Enhances UX by subtly scaling the input when the user interacts with it.
                        whileFocus={{ scale: 1.02 }}
                    />
                    {/* Animated paragraph to display the selected file name or a placeholder.
                       It's important for showing the user which file they’ve selected.
                       // Use case: Confirms to the user that their file selection was successful. */}
                    <motion.p
                        // Styles for the paragraph: small text and gray color.
                        // It's important for providing a subtle, non-intrusive display.
                        // Use case: Shows the file name without overwhelming the UI.
                        className="mt-2 text-sm text-gray-500"
                        // Initial state: invisible.
                        // It's important for setting up the animation starting point.
                        // Use case: Prepares the text to fade in after the input appears.
                        initial={{ opacity: 0 }}
                        // Animate state: fully visible.
                        // It's important for completing the animation effect.
                        // Use case: Fades in the file name or placeholder text.
                        animate={{ opacity: 1 }}
                        // Animation settings: 0.3-second duration with a 0.2-second delay.
                        // It's important for timing the animation after the input.
                        // Use case: Creates a staggered effect for a polished look.
                        transition={{ duration: 0.3, delay: 0.2 }}
                    >  {/*
                        // Conditionally display the selected file’s name or a placeholder.
                        // It's important for providing feedback on the file selection.
                        // Use case: Shows the file name if selected, or "No file chosen" if not.  */}
                        {selectedFile ? selectedFile.name : "No file chosen"}
                    </motion.p>
                </motion.div>

                {/* Upload Button: Animated button to trigger the file upload and recipe generation.
                   It's important for providing a clear call-to-action to upload the image.
                   Use case: Initiates the upload process when the user clicks the button. */}
                <motion.button
                    // Event handler for clicking the button.
                    // It's important for triggering the uploadFile function.
                    // Use case: Starts the image upload and recipe generation process.
                    onClick={uploadFile}
                    // Disable the button if loading or no file is selected.
                    // It's important for preventing invalid actions during loading or without a file.
                    // Use case: Disables the button to prevent multiple uploads or uploads without a file.
                    disabled={loading || !selectedFile}
                    // Styles for the button: full width, indigo background, white text, rounded, and hover effect.
                    // It's important for making the button visually appealing and interactive.
                    // Use case: Highlights the button as the primary action with a modern design.
                    className="w-full bg-indigo-600 text-white py-3 px-4 rounded-xl hover:bg-indigo-700 transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                    // Apply buttonVariants for hover and tap animations.
                    // It's important for adding interactive animations to the button.
                    // Use case: Scales the button on hover and tap for better user feedback.
                    variants={buttonVariants}
                    // Animate on hover: apply the hover variant.
                    // It's important for triggering the hover animation.
                    // Use case: Scales the button up when the user hovers over it.
                    whileHover="hover"
                    // Animate on tap: apply the tap variant.
                    // It's important for triggering the tap animation.
                    // Use case: Scales the button down when the user clicks it.
                    whileTap="tap"
                > {/*
                    // Conditionally display the button text based on the loading state.
                    // It's important for providing feedback during the upload process.
                    // Use case: Shows "Processing..." while uploading, or "Generate Recipe" when idle. */}
                    {loading ? "Processing..." : "Generate Recipe"}
                </motion.button>

                {/* Error Message: Animated container for displaying errors.
                   It's important for informing the user of any issues during the upload or fetch process.
                   Use case: Shows an error message if the upload fails or no file is selected. */}
                <AnimatePresence> {/*
                    // Conditionally render the error message if an error exists.
                    // It's important for only showing the error when there’s an issue.
                    // Use case: Displays an error message when something goes wrong, like a failed API request. */}
                    {error && (
                        // Animated div for the error message with a red background and text.
                        // It's important for making the error message visually distinct.
                        // Use case: Highlights the error to ensure the user notices it.
                        <motion.div
                            // Styles for the error message: padding, red background, rounded, and small text.
                            // It's important for readability and visual distinction.
                            // Use case: Ensures the error message is clear and stands out.
                            className="mt-4 p-3 bg-red-50 text-red-600 rounded-lg text-sm"
                            // Initial state: invisible and positioned 10px above.
                            // It's important for setting up the animation starting point.
                            // Use case: Prepares the error message to slide down into view.
                            initial={{ opacity: 0, y: -10 }}
                            // Animate state: fully visible and at its normal position.
                            // It's important for completing the animation effect.
                            // Use case: Slides the error message into view when an error occurs.
                            animate={{ opacity: 1, y: 0 }}
                            // Exit state: invisible and positioned 10px above.
                            // It's important for animating the removal of the error message.
                            // Use case: Slides the error message out when the error is cleared.
                            exit={{ opacity: 0, y: -10 }}
                            // Animation settings: 0.3-second duration.
                            // It's important for controlling the speed of the animation.
                            // Use case: Ensures the animation is smooth and not too fast.
                            transition={{ duration: 0.3 }}
                        >   {/*
                            // Display the error message text.
                            // It's important for informing the user of the specific issue.
                            // Use case: Shows the error message, e.g., "Please select a file to upload."  */}
                            {error}
                        </motion.div>
                    )}
                </AnimatePresence>

                {/* Upload History Section: Animated container for displaying the user’s upload history.
                   It's important for showing the user’s past uploads and allowing them to re-generate recipes.
                   Use case: Displays a list of previous uploads with timestamps and clickable entries. */}
                <motion.div
                    // Styles for the history section: margin-top for spacing.
                    // It's important for layout spacing between sections.
                    // Use case: Ensures the history section is properly spaced from the upload form.
                    className="mt-6"
                    // Initial state: invisible and positioned 20px below.
                    // It's important for setting up the animation starting point.
                    // Use case: Prepares the history section to slide up into view.
                    initial={{ opacity: 0, y: 20 }}
                    // Animate state: fully visible and at its normal position.
                    // It's important for completing the animation effect.
                    // Use case: Slides the history section into view with a smooth transition.
                    animate={{ opacity: 1, y: 0 }}
                    // Animation settings: 0.5-second duration with a 0.2-second delay.
                    // It's important for timing the animation after the upload form.
                    // Use case: Creates a staggered effect for a polished look.
                    transition={{ duration: 0.5, delay: 0.2 }}
                >
                    {/* Heading for the history section with large text and bold font.
                       It's important for clearly indicating the purpose of this section.
                       Use case: Informs the user that this section shows their upload history. */}
                    <h2 className="text-2xl font-semibold text-gray-800 mb-4">  {/*
                        // Text content of the heading.
                        // It's important for labeling the section clearly.
                        // Use case: Tells the user this section contains their past uploads. */}
                        History
                    </h2>
                    {/* Conditionally render a loading message while history is being fetched.
                       It's important for providing feedback during the history fetch.
                       Use case: Shows "Loading history..." while the API request is in progress. */}
                    {loadingHistory && (
                        // Div for the loading message with gray text.
                        // It's important for indicating that the history is being loaded.
                        // Use case: Informs the user to wait while their history is fetched.
                        <div className="text-gray-500 mb-4"> {/*
                            // Text content of the loading message.
                            // It's important for clearly communicating the loading state.
                            // Use case: Provides a visual cue that the history is being fetched.  */}
                            Loading history...
                        </div>
                    )}
                    {/* Conditionally render a history error message if one exists.
                       It's important for informing the user if the history fetch fails.
                       Use case: Displays an error if the user isn’t logged in or the request fails. */}
                    {historyError && !loadingHistory && (
                        // Animated div for the history error message with red text.
                        // It's important for making the error message visually distinct.
                        // Use case: Highlights the error to ensure the user notices it.
                        <motion.div
                            // Styles for the error message: margin-bottom for spacing.
                            // It's important for layout spacing within the section.
                            // Use case: Ensures the error message is properly spaced from other elements.
                            className="text-red-500 mb-4"
                            // Initial state: invisible.
                            // It's important for setting up the animation starting point.
                            // Use case: Prepares the error message to fade in.
                            initial={{ opacity: 0 }}
                            // Animate state: fully visible.
                            // It's important for completing the animation effect.
                            // Use case: Fades in the error message when it appears.
                            animate={{ opacity: 1 }}
                            // Animation settings: 0.3-second duration.
                            // It's important for controlling the speed of the animation.
                            // Use case: Ensures the animation is smooth and not too fast.
                            transition={{ duration: 0.3 }}
                        > {/*
                            // Display the history error message text.
                            // It's important for informing the user of the specific issue.
                            // Use case: Shows the error, e.g., "Please log in to view history." */}
                            {historyError}
                        </motion.div>
                    )}
                    {/* Conditionally render the history list or a placeholder message.
                       It's important for displaying the history or indicating if it’s empty.
                       Use case: Shows the user’s past uploads or a message if there are none. */}
                    {!loadingHistory && (history.length === 0 ? (
                        // Paragraph for the empty history message with gray text.
                        // It's important for indicating that no history is available.
                        // Use case: Informs the user they haven’t uploaded any images yet.
                        <p className="text-gray-500"> {/*
                            // Text content of the empty history message.
                            // It's important for clearly communicating the state.
                            // Use case: Tells the user there are no history entries to display. */}
                            No history available.
                        </p>
                    ) : (
                        // Unordered list for the history items with scrolling and spacing.
                        // It's important for displaying the history entries in a scrollable list.
                        // Use case: Shows a list of past uploads that the user can click to re-generate recipes.
                        <ul className="space-y-3 max-h-60 overflow-y-auto">
                            {/* Use AnimatePresence to animate the addition and removal of history items.
                               It's important for creating smooth transitions when history items are added or removed.
                               Use case: Animates each history item as it appears in the list. */}
                            <AnimatePresence>
                                {/* Map over the history array to render each entry as a list item.
                                   It's important for dynamically generating the history list.
                                   Use case: Displays each past upload with its message and timestamp. */}
                                {history.map((entry: HistoryEntry, index: number) => (
                                    // Animated list item for each history entry.
                                    // It's important for rendering each history entry with animations.
                                    // Use case: Shows the history entry and allows the user to click it to re-generate the recipe.
                                    <motion.li
                                        // Unique key for React to manage the list efficiently.
                                        // It's important for proper rendering and updates of the list.
                                        // Use case: Ensures each history item renders correctly and animates independently.
                                        key={index}
                                        // Event handler for clicking the history item.
                                        // It's important for triggering the re-generation of the recipe.
                                        // Use case: Re-fetches the recipe and videos for the dish in the history entry.
                                        onClick={() => handleHistoryClick(entry)}
                                        // Styles for the list item: border, padding, cursor, hover effect, and rounded corners.
                                        // It's important for making the history items visually distinct and interactive.
                                        // Use case: Highlights the history item on hover and indicates it’s clickable.
                                        className="border-b py-3 cursor-pointer hover:bg-gray-50 transition-all duration-200 rounded-lg"
                                        // Apply historyItemVariants for entrance animation.
                                        // It's important for animating each history item into view.
                                        // Use case: Expands each history item into view with a smooth transition.
                                        variants={historyItemVariants}
                                        // Initial state: hidden (as defined in historyItemVariants).
                                        // It's important for starting the animation from the hidden state.
                                        // Use case: Prepares the history item for the entrance animation.
                                        initial="hidden"
                                        // Animate state: visible (as defined in historyItemVariants).
                                        // It's important for triggering the animation to the visible state.
                                        // Use case: Executes the entrance animation for the history item.
                                        animate="visible"
                                        // Exit state: hidden (as defined in historyItemVariants).
                                        // It's important for animating the removal of the history item.
                                        // Use case: Shrinks the history item out of view if it’s removed.
                                        exit="hidden"
                                    >
                                        {/* Paragraph for the history entry message with medium font.
                                           It's important for displaying the main content of the history entry.
                                           Use case: Shows the message, e.g., "Generated recipe for Pizza:". */}
                                        <p className="text-gray-700 font-medium"> {/*
                                            // Display the history entry message.
                                            // It's important for showing what action was taken.
                                            // Use case: Informs the user of the past action, e.g., recipe generation. */}
                                            {entry.message}
                                        </p>
                                        {/* Paragraph for the history entry timestamp with small text.
                                           It's important for showing when the action occurred.
                                           Use case: Provides context on when the upload or recipe generation happened. */}
                                        <p className="text-gray-500 text-sm">
                                            {/*
                                            // Format and display the timestamp using toLocaleString.
                                            // It's important for making the timestamp human-readable.
                                            // Use case: Shows the date and time of the history entry, e.g., "10/10/2023, 2:30 PM". */}
                                            {new Date(entry.timestamp).toLocaleString()}
                                        </p>
                                    </motion.li>
                                ))}
                            </AnimatePresence>
                        </ul>
                    ))}
                </motion.div>

                {/* Recipe Display: Animated container for displaying the generated recipe.
                   It's important for showing the recipe to the user after a successful upload.
                   Use case: Displays the recipe for the identified dish in a readable format. */}
                <AnimatePresence>
                    {/*
                    // Conditionally render the recipe section if a recipe exists.
                    // It's important for only showing the recipe when it’s available.
                    // Use case: Displays the recipe after the image upload or history item click succeeds. */}
                    {recipe && (
                        // Animated div for the recipe section with a gray background, padding, and shadow.
                        // It's important for making the recipe section visually distinct.
                        // Use case: Highlights the recipe in a clean, card-like section.
                        <motion.div
                            // Styles for the recipe section: margin-top, padding, gray background, rounded, and shadow.
                            // It's important for readability and visual distinction.
                            // Use case: Ensures the recipe is easy to read and stands out from other sections.
                            className="mt-6 p-6 bg-gray-50 rounded-xl shadow-md"
                            // Apply sectionVariants for entrance animation.
                            // It's important for animating the recipe section into view.
                            // Use case: Slides the recipe section in from the left when it appears.
                            variants={sectionVariants}
                            // Initial state: hidden (as defined in sectionVariants).
                            // It's important for starting the animation from the hidden state.
                            // Use case: Prepares the recipe section for the entrance animation.
                            initial="hidden"
                            // Animate state: visible (as defined in sectionVariants).
                            // It's important for triggering the animation to the visible state.
                            // Use case: Executes the entrance animation for the recipe section.
                            animate="visible"
                            // Exit state: invisible and positioned 50px to the right.
                            // It's important for animating the removal of the recipe section.
                            // Use case: Slides the recipe section out when it’s cleared.
                            exit={{ opacity: 0, x: 50 }}
                        >
                            {/* Heading for the recipe section with the dish name.
                               It's important for clearly indicating the dish the recipe is for.
                               Use case: Informs the user which dish the recipe corresponds to, e.g., "Recipe for Pizza". */}
                            <h2 className="text-2xl font-semibold text-gray-800 mb-2">
                                {/*
                                // Text content of the heading with the dish name.
                                // It's important for labeling the recipe clearly.
                                // Use case: Shows the user the dish name alongside the recipe.  */}
                                Recipe for {dish}
                            </h2>
                            {/* Preformatted text element to display the recipe.
                               It's important for preserving the recipe’s formatting (e.g., line breaks).
                               Use case: Displays the recipe in a readable format with proper spacing. */}
                            <pre className="whitespace-pre-wrap text-gray-600">
                                {/*
                                // Display the recipe text.
                                // It's important for showing the recipe content to the user.
                                // Use case: Shows the detailed recipe instructions for the dish.  */}
                                {recipe}
                            </pre>
                        </motion.div>
                    )}
                </AnimatePresence>

                {/* Loading Indicator for Videos: Animated container for displaying a loading message while videos are fetched.
                   It's important for providing feedback during the video fetch process.
                   Use case: Shows a message while related videos are being loaded. */}
                <AnimatePresence> {/*
                    // Conditionally render the loading message if videos are being fetched.
                    // It's important for only showing the message during the fetch.
                    // Use case: Displays "Fetching related videos..." while the API request is in progress */}
                    {loadingVideos && (
                        // Animated div for the loading message with a green background and text.
                        // It's important for making the loading message visually distinct.
                        // Use case: Highlights the loading state to ensure the user notices it.
                        <motion.div
                            // Styles for the loading message: margin-top, padding, green background, centered text, and small text.
                            // It's important for readability and visual distinction.
                            // Use case: Ensures the loading message is clear and stands out.
                            className="mt-6 p-3 bg-green-50 text-green-600 text-center rounded-lg text-sm"
                            // Initial state: invisible and positioned 10px above.
                            // It's important for setting up the animation starting point.
                            // Use case: Prepares the loading message to slide down into view.
                            initial={{ opacity: 0, y: -10 }}
                            // Animate state: fully visible and at its normal position.
                            // It's important for completing the animation effect.
                            // Use case: Slides the loading message into view when videos are being fetched.
                            animate={{ opacity: 1, y: 0 }}
                            // Exit state: invisible and positioned 10px above.
                            // It's important for animating the removal of the loading message.
                            // Use case: Slides the loading message out when the fetch completes.
                            exit={{ opacity: 0, y: -10 }}
                            // Animation settings: 0.3-second duration.
                            // It's important for controlling the speed of the animation.
                            // Use case: Ensures the animation is smooth and not too fast.
                            transition={{ duration: 0.3 }}
                        > {/*
                            // Text content of the loading message.
                            // It's important for clearly communicating the loading state.
                            // Use case: Informs the user to wait while videos are being fetched. */}
                            Fetching related videos... Please wait.
                        </motion.div>
                    )}
                </AnimatePresence>

                {/* Videos Section: Animated container for displaying related YouTube videos.
                   It's important for showing instructional videos related to the dish.
                   Use case: Provides videos to help the user learn how to cook the identified dish. */}
                <AnimatePresence> {/*
                    // Conditionally render the videos section if videos are loaded and available.
                    // It's important for only showing the videos when they’re available and not loading.
                    // Use case: Displays the videos after they’ve been successfully fetched. */}
                    {!loadingVideos && videos.length > 0 ? (
                        // Animated div for the videos section.
                        // It's important for grouping the videos in a distinct section.
                        // Use case: Organizes the videos in a clean, visually appealing layout.
                        <motion.div
                            // Styles for the videos section: margin-top for spacing.
                            // It's important for layout spacing between sections.
                            // Use case: Ensures the videos section is properly spaced from the recipe.
                            className="mt-6"
                            // Apply sectionVariants for entrance animation.
                            // It's important for animating the videos section into view.
                            // Use case: Slides the videos section in from the left when it appears.
                            variants={sectionVariants}
                            // Initial state: hidden (as defined in sectionVariants).
                            // It's important for starting the animation from the hidden state.
                            // Use case: Prepares the videos section for the entrance animation.
                            initial="hidden"
                            // Animate state: visible (as defined in sectionVariants).
                            // It's important for triggering the animation to the visible state.
                            // Use case: Executes the entrance animation for the videos section.
                            animate="visible"
                            // Exit state: invisible and positioned 50px to the right.
                            // It's important for animating the removal of the videos section.
                            // Use case: Slides the videos section out when it’s cleared.
                            exit={{ opacity: 0, x: 50 }}
                        >
                            {/* Heading for the videos section with large text and bold font.
                               It's important for clearly indicating the purpose of this section.
                               Use case: Informs the user that this section contains related videos. */}
                            <h2 className="text-2xl font-semibold text-gray-800 mb-4">{/*
                                // Text content of the heading.
                                // It's important for labeling the section clearly.
                                // Use case: Tells the user this section contains videos related to the dish. */}
                                Related Videos:
                            </h2>
                            {/* Grid container for the videos with a single-column layout and gap.
                               It's important for organizing the videos in a clean, responsive layout.
                               Use case: Displays the videos in a vertical list with spacing between them. */}
                            <div className="grid grid-cols-1 gap-6">
                                {/* Map over the videos array to render each video as a card.
                                   It's important for dynamically generating the video list.
                                   Use case: Displays each video with its thumbnail, title, and embedded player. */}
                                {videos.map((video: Video) => (
                                    // Animated div for each video card with flex layout.
                                    // It's important for rendering each video with animations.
                                    // Use case: Shows the video’s thumbnail, title, and embedded player in a card layout.
                                    <motion.div
                                        // Unique key for React to manage the list efficiently.
                                        // It's important for proper rendering and updates of the list.
                                        // Use case: Ensures each video card renders correctly and animates independently.
                                        key={video.videoId}
                                        // Styles for the video card: flex layout with spacing between elements.
                                        // It's important for aligning the thumbnail and video content.
                                        // Use case: Positions the thumbnail and video details side by side.
                                        className="flex items-center space-x-4"
                                        // Initial state: invisible and positioned 20px below.
                                        // It's important for setting up the animation starting point.
                                        // Use case: Prepares the video card to slide up into view.
                                        initial={{ opacity: 0, y: 20 }}
                                        // Animate state: fully visible and at its normal position.
                                        // It's important for completing the animation effect.
                                        // Use case: Slides the video card into view with a smooth transition.
                                        animate={{ opacity: 1, y: 0 }}
                                        // Animation settings: 0.4-second duration.
                                        // It's important for controlling the speed of the animation.
                                        // Use case: Ensures the animation is smooth and not too fast.
                                        transition={{ duration: 0.4 }}
                                    >
                                        {/* Image element for the video thumbnail.
                                           It's important for providing a visual preview of the video.
                                           Use case: Shows the user what the video looks like before they play it. */}
                                        <img
                                            // Source URL of the video thumbnail.
                                            // It's important for displaying the correct thumbnail image.
                                            // Use case: Loads the thumbnail image for the YouTube video.
                                            src={video.thumbnail}
                                            // Alt text for accessibility and SEO.
                                            // It's important for describing the image to screen readers.
                                            // Use case: Ensures the thumbnail is accessible if it fails to load.
                                            alt={video.title}
                                            // Styles for the thumbnail: fixed size, object-cover, rounded, and shadow.
                                            // It's important for consistent appearance.
                                            // Use case: Ensures the thumbnail fits well in the card layout.
                                            className="w-32 h-20 object-cover rounded-lg shadow-sm"
                                        />
                                        {/* Div for the video title and embedded player.
                                           It's important for grouping the video details.
                                           Use case: Displays the video title and player in a clean layout. */}
                                        <div className="flex-1">
                                            {/* Paragraph for the video title with medium font.
                                               It's important for displaying the title of the video.
                                               Use case: Informs the user what the video is about, e.g., "How to Make Pizza". */}
                                            <p className="text-sm font-medium text-gray-700">
                                               {/*  // Display the video title.
                                                // It's important for providing context for the video.
                                                // Use case: Shows the title of the YouTube video.*/} 
                                                {video.title}
                                            </p>
                                            {/* Iframe for embedding the YouTube video player.
                                               It's important for allowing the user to watch the video directly on the page.
                                               Use case: Embeds the YouTube video so the user can play it without leaving the app. */}
                                            <iframe
                                                // Styles for the iframe: full width and rounded corners.
                                                // It's important for fitting the video player in the layout.
                                                // Use case: Ensures the video player looks good within the card.
                                                className="mt-2 w-full rounded-lg"
                                                // Fixed height for the video player.
                                                // It's important for maintaining a consistent aspect ratio.
                                                // Use case: Ensures the video player is proportionate and not distorted.
                                                height="200"
                                                // Source URL for the YouTube embed.
                                                // It's important for linking to the correct video.
                                                // Use case: Embeds the specific YouTube video using its videoId.
                                                src={`https://www.youtube.com/embed/${video.videoId}`}
                                                // Title for accessibility.
                                                // It's important for describing the iframe to screen readers.
                                                // Use case: Ensures the video player is accessible to all users.
                                                title={video.title}
                                                // Remove the border from the iframe.
                                                // It's important for a clean appearance.
                                                // Use case: Ensures the video player blends seamlessly with the card.
                                                frameBorder="0"
                                                // Allow various YouTube features like autoplay and fullscreen.
                                                // It's important for enabling standard video player functionality.
                                                // Use case: Allows the user to interact with the video player fully.
                                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                                                // Enable fullscreen mode for the video player.
                                                // It's important for allowing the user to watch the video in fullscreen.
                                                // Use case: Enhances the viewing experience by supporting fullscreen playback.
                                                allowFullScreen
                                            ></iframe>
                                        </div>
                                    </motion.div>
                                ))}
                            </div>
                        </motion.div>
                    ) : !loadingVideos && recipe && videos.length === 0 && (
                        // Fallback message if no videos are found after loading.
                        // It's important for informing the user if no videos are available.
                        // Use case: Shows a message if the backend couldn’t find related videos for the dish.
                        <motion.div
                            // Styles for the fallback message: margin-top for spacing.
                            // It's important for layout spacing between sections.
                            // Use case: Ensures the message is properly spaced from the recipe.
                            className="mt-6"
                            // Apply sectionVariants for entrance animation.
                            // It's important for animating the message into view.
                            // Use case: Slides the message in from the left when it appears.
                            variants={sectionVariants}
                            // Initial state: hidden (as defined in sectionVariants).
                            // It's important for starting the animation from the hidden state.
                            // Use case: Prepares the message for the entrance animation.
                            initial="hidden"
                            // Animate state: visible (as defined in sectionVariants).
                            // It's important for triggering the animation to the visible state.
                            // Use case: Executes the entrance animation for the message.
                            animate="visible"
                            // Exit state: invisible and positioned 50px to the right.
                            // It's important for animating the removal of the message.
                            // Use case: Slides the message out when videos are loaded or cleared.
                            exit={{ opacity: 0, x: 50 }}
                        > {/*
                            // Paragraph for the fallback message with gray text.
                            // It's important for indicating that no videos were found.
                            // Use case: Informs the user that no related videos are available. */}
                            <p className="text-gray-500">{/*
                                // Text content of the fallback message.
                                // It's important for clearly communicating the state.
                                // Use case: Tells the user no videos were found for the dish. */}
                                No related videos found.
                            </p>
                        </motion.div>
                    )}
                </AnimatePresence>
            </motion.div>
        </div>
    );
};